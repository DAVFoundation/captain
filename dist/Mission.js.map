{"version":3,"sources":["../src/Mission.ts"],"names":[],"mappings":";;AAAA,iDAAuD;AAGvD,uCAAgC;AAIhC,2CAAoC;AACpC,mCAA4B;AAE5B,+DAA+E;AAC/E;;GAEG;AACH;IAaE,YACU,OAAW,EACX,OAAW,EACX,OAAU,EACV,OAAgB;QAHhB,YAAO,GAAP,OAAO,CAAI;QACX,YAAO,GAAP,OAAO,CAAI;QACX,YAAO,GAAP,OAAO,CAAG;QACV,YAAO,GAAP,OAAO,CAAS;IACtB,CAAC;IAjBL,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,IAAW,EAAE;QACX,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IASD;;;;OAIG;IACI,KAAK,CAAC,YAAY,CACvB,eAAuB,EACvB,gBAAwB;QAExB,IAAI;YACF,MAAM,kBAAkB,GAAG,MAAM,mBAAS,CAAC,YAAY,CACrD,IAAI,CAAC,OAAO,CAAC,EAAE,EACf,IAAI,CAAC,OAAO,CAAC,WAAW,EACxB,eAAe,EACf,gBAAgB,EAChB,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,IAAI,CAAC,OAAO,CACb,CAAC;YACF,OAAO,kBAAkB,CAAC;SAC3B;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,EAAE,CAAC,CAAC;SACjD;IACH,CAAC;IACD;;;;;OAKG;IACI,KAAK,CAAC,eAAe,CAC1B,eAAuB,EACvB,gBAAwB;QAExB,IAAI;YACF,MAAM,kBAAkB,GAAG,MAAM,mBAAS,CAAC,eAAe,CACxD,IAAI,CAAC,OAAO,CAAC,EAAE,EACf,IAAI,CAAC,OAAO,CAAC,WAAW,EACxB,eAAe,EACf,gBAAgB,EAChB,IAAI,CAAC,OAAO,CACb,CAAC;YACF,OAAO,kBAAkB,CAAC;SAC3B;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,EAAE,CAAC,CAAC;SACpD;IACH,CAAC;IACD;;;OAGG;IACI,KAAK,CAAC,WAAW,CAAC,MAAqB;QAC5C,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;QAC/B,OAAO,MAAM,eAAK,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY;IACjF,CAAC;IACD;;;;OAIG;IACI,KAAK,CAAC,QAAQ,CACnB,UAAqB;QAErB,MAAM,kBAAkB,GAAuB,MAAM,eAAK,CAAC,QAAQ,CACjE,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CACb,CAAC,CAAC,yBAAyB;QAC5B,MAAM,mBAAmB,GAAkB,kBAAkB,CAAC,UAAU,CACtE,UAAU;YACV,6BAAmB,CAAC,QAAQ,CAAC,eAAe,CAC1C,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,uCAAiB,CAAC,OAAO,CAC1B,CACF,CAAC;QACF,MAAM,aAAa,GAAG,mBAAmB,CAAC,GAAG,CAC3C,CAAC,MAAS,EAAE,EAAE,CAAC,IAAI,iBAAO,CAAI,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAClE,CAAC;QACF,OAAO,yBAAU,CAAC,cAAc,CAAC,aAAa,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAC;CACF;AAlGD,0BAkGC","file":"Mission.js","sourcesContent":["import { ID, Observable, DavID } from './common-types';\nimport { TransactionReceipt } from 'web3/types';\nimport IConfig from './IConfig';\nimport Message from './Message';\nimport MessageParams from './MessageParams';\nimport MissionPeerIdMessageParams from './MissionPeerIdMessageParams';\nimport MissionParams from './MissionParams';\nimport Contracts from './Contracts';\nimport Kafka from './Kafka';\nimport KafkaMessageStream from './KafkaMessageStream';\nimport KafkaMessageFactory, { MessageCategories } from './KafkaMessageFactory';\n/**\n * @class Mission class represent an approved mission.\n */\nexport default class Mission<T extends MissionParams> {\n  public get params(): T {\n    return this._params;\n  }\n\n  public get id(): ID {\n    return this._selfId;\n  }\n\n  public get peerId(): ID {\n    return this._peerId;\n  }\n\n  constructor(\n    private _selfId: ID,\n    private _peerId: ID,\n    private _params: T,\n    private _config: IConfig,\n  ) { }\n\n  /**\n   * @method signContract Used to transfer tokens to the basicMission contract in order to start the mission.\n   * @param walletPrivateKey Ethereum wallet private key, to charge for the mission.\n   * @returns Ethereum transaction receipt.\n   */\n  public async signContract(\n    walletPublicKey: string,\n    walletPrivateKey: string,\n  ): Promise<TransactionReceipt> {\n    try {\n      const transactionReceipt = await Contracts.startMission(\n        this._params.id,\n        this._params.neederDavId,\n        walletPublicKey,\n        walletPrivateKey,\n        this._params.vehicleId,\n        this._config,\n      );\n      return transactionReceipt;\n    } catch (err) {\n      throw new Error(`Fail to sign contract ${err}`);\n    }\n  }\n  /**\n   * @method finalizeMission Used to approve the mission is completed,\n   * and transfer the tokens from the basicMission contract to the service provider.\n   * @param walletPrivateKey Ethereum wallet private key, to charge for the mission.\n   * @returns Ethereum transaction receipt object.\n   */\n  public async finalizeMission(\n    walletPublicKey: string,\n    walletPrivateKey: string,\n  ): Promise<TransactionReceipt> {\n    try {\n      const transactionReceipt = await Contracts.finalizeMission(\n        this._params.id,\n        this._params.neederDavId,\n        walletPublicKey,\n        walletPrivateKey,\n        this._config,\n      );\n      return transactionReceipt;\n    } catch (err) {\n      throw new Error(`Fail to finalize mission ${err}`);\n    }\n  }\n  /**\n   * @method sendMessage Used to send message to the service consumer.\n   * @param params message parameters.\n   */\n  public async sendMessage(params: MessageParams): Promise<void> {\n    params.senderId = this._selfId;\n    return await Kafka.sendParams(this._peerId, params, this._config); // Channel#4\n  }\n  /**\n   * @method messages Used to subscribe for messages from the service provider.\n   * @param filterType (optional) array of the expected message params object type.\n   * @returns Observable object.\n   */\n  public async messages<U extends MessageParams>(\n    filterType?: string[],\n  ): Promise<Observable<Message<MessageParams>>> {\n    const kafkaMessageStream: KafkaMessageStream = await Kafka.messages(\n      this._selfId,\n      this._config,\n    ); // Channel#4 or Channel#6\n    const messageParamsStream: Observable<U> = kafkaMessageStream.filterType(\n      filterType ||\n      KafkaMessageFactory.instance.getMessageTypes(\n        this._params.protocol,\n        MessageCategories.Message,\n      ),\n    );\n    const messageStream = messageParamsStream.map(\n      (params: U) => new Message<U>(this._selfId, params, this._config),\n    );\n    return Observable.fromObservable(messageStream, messageParamsStream.topic);\n  }\n}\n"]}