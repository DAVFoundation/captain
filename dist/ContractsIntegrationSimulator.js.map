{"version":3,"sources":["../src/ContractsIntegrationSimulator.ts"],"names":[],"mappings":"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","file":"ContractsIntegrationSimulator.js","sourcesContent":["/*\nThis script simulate full flow of Contracts use.\nTo use this script fill in all params.\n */\n\n// tslint:disable:no-console\nimport Contracts from './Contracts';\nimport Config from './Config';\nimport { ContractTypes, PriceType } from './common-enums';\nimport Price from './Price';\nimport sdkLogger from './sdkLogger';\nconst configuration = new Config({});\n\n// params start\nconst MISSION_ID = '0xf3229680B0166F0812e0ECEAd69B1dd144334229';\nconst MISSION_PRICE = [new Price('100000000000000000', PriceType.flat, '')];\nconst DAV_ID = '0xFEDdDcBf94cB620d6D92D049b75fc7062a3E2Fc6';\nconst WALLET_PUBLIC_KEY = '0xFEDdDcBf94cB620d6D92D049b75fc7062a3E2Fc6';\nconst WALLET_PRIVATE_KEY =\n  'PRIVATE_KEY_FOR_0xFEDdDcBf94cB620d6D92D049b75fc7062a3E2Fc6';\nconst IDENTITY_PRIVATE_KEY =\n  'PRIVATE_KEY_FOR_0xFEDdDcBf94cB620d6D92D049b75fc7062a3E2Fc6';\nconst WALLET_ADDRESS = '0xFEDdDcBf94cB620d6D92D049b75fc7062a3E2Fc6';\nconst VEHICLE_ID = '0x3e54f4d0A7C93516f962e5cfcB402dB6C2700C30';\n// params end\n\n// identityPrivateKey: string, walletAddress\n\nasync function main(): Promise<void> {\n  const printLine = () =>\n    sdkLogger(\n      '====================================================================================================',\n    );\n\n  const isRegistered = async () => {\n    sdkLogger('Checking if is registered...');\n    try {\n      const res = await Contracts.isIdentityRegistered(DAV_ID, configuration);\n      sdkLogger(res);\n      printLine();\n    } catch (err) {\n      sdkLogger(err);\n    }\n  };\n\n  const registerIdentity = async () => {\n    sdkLogger('Registering identity...');\n    try {\n      const receipt = await Contracts.registerIdentity(\n        DAV_ID,\n        IDENTITY_PRIVATE_KEY,\n        WALLET_ADDRESS,\n        WALLET_PRIVATE_KEY,\n        configuration,\n      );\n      sdkLogger(receipt);\n      printLine();\n    } catch (err) {\n      sdkLogger(err);\n    }\n  };\n\n  const approveMission = async () => {\n    sdkLogger('Approving mission...');\n    try {\n      const receipt = await Contracts.approveMission(\n        DAV_ID,\n        WALLET_PRIVATE_KEY,\n        configuration,\n      );\n      sdkLogger(receipt);\n      printLine();\n    } catch (err) {\n      sdkLogger(err);\n    }\n  };\n\n  const startMission = async () => {\n    sdkLogger('Starting mission...');\n    try {\n      const receipt = await Contracts.startMission(\n        MISSION_ID,\n        DAV_ID,\n        WALLET_PUBLIC_KEY,\n        WALLET_PRIVATE_KEY,\n        VEHICLE_ID,\n        configuration,\n      );\n      sdkLogger(receipt);\n      printLine();\n    } catch (err) {\n      sdkLogger(err);\n    }\n  };\n\n  const finalizeMission = async () => {\n    sdkLogger('Finalizing mission...');\n    try {\n      const receipt = await Contracts.finalizeMission(\n        MISSION_ID,\n        DAV_ID,\n        WALLET_PUBLIC_KEY,\n        WALLET_PRIVATE_KEY,\n        configuration,\n      );\n      sdkLogger(receipt);\n      printLine();\n    } catch (err) {\n      sdkLogger(err);\n    }\n  };\n\n  const watchMission = () => {\n    sdkLogger('Getting events...');\n    try {\n      const observable = Contracts.watchContract(\n        MISSION_ID,\n        ContractTypes.basicMission,\n        configuration,\n      );\n      observable.subscribe(\n        (event: any) => {\n          sdkLogger('New event:');\n          sdkLogger(event);\n          printLine();\n        },\n        (err: any) => {\n          sdkLogger('Error:');\n          sdkLogger(err);\n          printLine();\n        },\n      );\n      printLine();\n    } catch (err) {\n      sdkLogger(err);\n    }\n  };\n\n  const waitASecond = () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, 1000);\n    });\n  };\n\n  // await registerIdentity();\n  // await registerIdentity();\n\n  // watchMission();\n  // await approveMission();\n  // await startMission();\n  // await finalizeMission();\n}\n\nmain();\n"]}